Bugs:
- \text
    - trying to test out if crossing out part of expression with the \cancel command is supported
    - this created a \text, doesn't appear to be supported
        - deleting the text it added seemed to put it in a weird state, couldn't move th cusor
        - on example page it shows the latex updating live, this was shown: \text{undefined}
        - also seems to have issues moving from the left into the text after clicking elsewhere


Learning JS Notes:
    - closure - a function that uses the context it was created in to access data
      or other functions
        - in javascript function scope is used for closures, as block scope does
          not exist
    - The global 'Object' is a function (remembvering that functions themselves
      are objects, just as numbers, strings, etc.)
        - Object.prtotype is the the root prototype
        - can 'Object' itself be used as a prototype?


Work on 1/9/2016
----------------
- brushing up on general JS concepts
- trying to figure out what exactly P.js provides
- debugging directly though the initialization of a mathquill element to
  try to understand what is goin on
- new task
    - acting purely as a consumer of MathQuill, with it as a black box,
      create an interface for editing an equation in a series of steps
    - use the built in MathQuill MathField construct to allow users to
      edit an expression and then hit a button to declare that they are
      moving on to the next 'step'
        - A MathField can easily be created by mathquill-ifying a span 
          with latex in it
    - Should be as simple as starting with a span, adding a button to export
      the latex in the current field and create a new one below it with this
      as the contents
    - put these fields in a div so that the last one can always be found to
      know where to copy from to create the next step
    - bonus
        - create an undo button (not for MathQuill itself, but to delete a step)
            - save the steps in the background to allow re-do
        - put the cursor back where it was
- got a little distracted looking at java projects again
    - it's hard to give up on a prototype, but the java community just isn't as
      active
        - and the editing experience with mathquill is just great
        - and it has lots of tests
        - might decide to go back to the java project someday, but for now I need
          to move on

Work on 1/10/2016
-----------------
- same task as before, make step by step editor by simply copying mathquill fields
- starter task
    - just programmaticlly generate a few MathFields, giving the latex as string
      literals in the JS, adding spans and mathquill-ifying them
        - time estimate 30 mins, complete time 10:30
        - actually completed, 10:15
    - create a button that will search the div for the last element, export latex from
      it and use it to generate a new mathfield
        - time estimate - 30 minutes, complete time 10:45
        - actually completed, 10:25
    - create a keyboard shortcut that will remove the need to click the button
        - maybe crtl-e for 'edit'?
        - should this be attached to all of the boxes to allow inserting a step below the current?
        - or should it just be a global key event that will always copy the last step?
        - time estimate 30 minutes, complete time 11
        - actually completed, 10:45
            - just did a global event for now
    - create a button and shortcut for undo
        - time estimate 30 minutes, complete time 11
        - finished, 11:15
            - small speeling error I was staring at in the debugger for a while "why is this undefied?!?!"
    - create redo button and keyboard shortcut
        - completed 11:45
    - create test video to show interface in action
        - fixed fraction navigation, enabled atuo commands for: sqrt, sum, etc.
        - time estimate 10 minutes, finish time - 12:05
        - actual complete time - 12:10
    - first version of the app is reasonably functional
    - lunch break
        - ~1 hour
    - noticed issue with copy-paste
        - was a problem with re-mathquillifying elements
            - this doesn't work
            - if I want to use mathquill methods, I need to keep track of
              the mathquill virtual dom versions along with the ones in the DOM
        - had to mess around with this for a while
            - finally just decided to keep a parallel array of all of the mq
              versions of each step as a parrallel array to the list in the DOM
        - finished 2pm
    - sporatically still seeing issues copying out of static math
        - seems to just be on firefox, chrome is fine
        - to reproduce, copy one section of static math expression and paste elsewhere
        - try copying a new selection and it will still pate the original selection
          copied first
    - also needed to manually mathquillify mathquill-static-math spans
        - old docs say this isn't necessary
            - the new ones have an example fragment that makes it seem like this should
              still work
    - resuming work 2:15
        - working on publishing a static version of the app for others to test
        - on gh-pages branch just published the source including the usually
          ignored 'build' directory to include the compiled MathQuill source
    - next task, button to generate new expression work spaces
        - remove globals, etc. described below
        - time estimate 30 minutes, expected complete time 3:45
        - took a bit longer than expected
            - had a few distractions
            - actual finsish time 6:10
        - strategy
            - all problem workspaces will be generated with jquery
                - the append method returns the dom element, I want to store this along
                  with the state needed for each dom element
                - whether everything is nested together or stored in pareallel lists
                  doesn't seem to matter much
            - at the global level, there will be a single array for all of the state
              managed for a list of problems
            - on page load, create the first problem workspace as a DOM element using
              jquery
                - this will just be a div to hold the divs for the controls and expression list 
                - create the control buttons
                    - what to bind these to?
                - create the expression list div and populate it with the first expression
                    - insert as a span
                    - mathquill it, save the mathquill object to a list of all current mq objects
                      inside of the object representing this problem
    - fixing keyboard shortcuts with multiple problems
        - took a little long, eventaully got it to work attaching the key listener
          to the div for a given problem rather than the individual text boxes
        - finish time 7:30
    - save functionality
        - offline save, no server
        - http://eligrey.com/demos/FileSaver.js/
        - total expected time 30 mins, expected completion 9:00
        
    - load save file
        - done
        - needed to put in a timeout hack to fix multiple MathFields being selected
          when I generated then programmatically and called focus on each as they 
          were added (reusing code from the buttons/key events)
    - teacher grading
        - time estimate, 40 mins, expected completion 8:00
        - make 3 student assignments, zip them manually
        - create teacher grading page, similar to student assignment page
            - teachers can enter problem numbers next to expressions representing final answers
              for problems
            - they can omit problem numbers where manual grading is needed
                - will be more useful once students can do things other than manipulate equations
                    - type text
                    - draw diagrams
                    - draw/manipulate graphs
                    - create/fill in tables
        - https://stuk.github.io/jszip/

--------------
1/12/2016
--------------
- finish teacher grading
    - read contents of zip files
    - re-use assignment interface for answer key
        - steps are instead used to denote several answers
        - might be worth it to implement basic correction 'modes'
            - all answers must be present
            - one of many correct answers
            - n of many answers (example, 3 of 5 possible correct answers must be provided)
    - generate teacher summary page with just incorrect work
        - can make step static math rather than editable fields
        - provide a box for feedback and another for partial credit
        - ask for default points per problem
            - allow them to override total points for each problem while grading
            - as well as individual student scores
    - time estimate, basic answer check
        - single answer for now, need to decide on student experience for muliple answers
        - 15 mins, expected finish 6:45
    - caught up trying to get static math expressions rendered in a loop after
      reading and re-arranging the student work

-----------------
1/13/2016
-----------------
- teacher grading page
    - didn't get much done, spent a little time still trying to generate the most basic
      teacher overview page
    - eventually just changed the student work for a single problem (across all stuedents)
      to look like a single assignment with many different problems (the individual student
      assignment format) and used the existing method to open it as a single assignment
        - code currently aassumes there is only one assignment, so even if this is how
          it is done eventaully, a container to put the assignment into would need
          to be passed into the method to populate an assignment with data
        - in the student mode, there would just be a single assignment open
        - in teacher mode there would be a list of 'assignments' where each one
          represents the work across all students on a single problem

-------------------
1/14/2016
-------------------
- try to get static math rendering to work
    - try to remove forEach loops to see if it fixes the previous issue
        - time estimate 15 minutes, expected complte 7:00
    - or just include staticMath as a flag in the openAssignment() method
    - actual finish time 7:15
    - figured it out, stupid bug, was passing a list of jQuery elements into the
      MathQuill methods to create StaticMath or a MathField
- student work filtering based on answer
    - read in doc at the time student answers are selected
    - prompt, do you want to use the current doc as an answer key?
        - your doc will be replaced by the student summary, reccomended that you save
          the current doc before continuing (to make the answer key reusable)
        - awkward user behavior, will fix soon
    - time estimate 15 minutes, expected finish time 8:00
    - update 8:10
        - cleaned up branch to get rid of old commits from debugging
        - updated styles to add boarders around divs and change colors
        - new finish time, 8:15
        - actual finish time 8:40
- generate divs with correct work, hide them by default
    - color code them with classes based upon corect incorrect
    - time estimate 20 mins, expected finish time 9:00
    - finsh time, 9:20
        - took a little bit to figure out the good way to do it with jquery
        - and some time wasted chasing a class selector tha should have been an id selector
- enable teacher feedback box, show scores on summary page
    - allow teachers to override scores to give partial credit
    - when partial credit is given, turn yellow
    - if full credit is given, change status to correct, and change color
        - don't hide immediately, use an animation to remove it
        - this would be easier to undo with a problem local toggle to see correct work
            - TODO 
    - estimate 30 mins, expected finish 10 pm
    - preempted
        - bug, parenthesis are not showing on correct answers
        - fixed by triggering a delayed click event on the checkbox to toggle showing correct answers
          rather than hiding by default or immediately after creation

-------------------
1/15/2016
-------------------
- define scope for work this weekend
    - 15 minutes, expected completion 7:15
- add point value to problems on teacher grade page
    - default to 1 point per problem
        - maybe add a popup to ask later?
    - give a text box at the top of each problem summary showing all work
      to change the point value
        - update all child elements for each students work to say
        - points _m_ out of n
        - m value is the partial credit given by teacher, or full credit
          given by the computer
    - this will help to find the problem summary container corresponding to the text box
        - jQuery closest() method searches up the DOM tree for a given selector
        - could also be used to refactor some of the code for problems/steps
          on the student side
    - estimate 20 minutes, expected complete 8:00
    - update at 8:15, added the text boxes, got a little distracted
        - still need to add the action of updating the possible points
          in each individual problem
        - should I prompt users if the partial credit scores should be scaled
          as well?
    - update 8:30
        - distracted reading a few articles, new finish time 8:40
        - actual finish time 9:00
- enable teachers to apply a given point value to all students who got the
  same wrong, or not automatically graded correct answer
    - time estimate, 15 mins, complete time 9:15
    - actual finish time, 9:40
- change problem status based on manual grade given
    - create new class for partially-correct, colored yellow
    - listen for change event on text field, make sure it also updates
      the other problems that the score propogates to
    - time estimate 15 mins, finish time 10:00
    - actual finsih time, 10:20
- add feedback textarea
    - estimate 5 minutes, finsih 10:25
    - won't worry about copying feedback to similar-answer problems for now
    - will wait for user feedback, simple enough to add
    - added, also implemented show/hide for partially correct answers
        - not sure about hiding answers as soon as they are given
          a score that puts them into a category that is currently hidden
        - at the least need an animation to hide them gradually
        - on mistyped scores, wil it be too anoying to go find it again?
            - definitely want problem local show/hide in this case
- add animation to show/hide problems
    - finished

-------------------
1/16/2016
-------------------
- update problem page to take advantage of MathQuill() function
    - avoid the need to keep track of all MathQuill objects parallel
      to the actual DOM element
    - time estimate 15 mins, complete time 7:30
    - completed on time
- fix keyboard shortcuts so they work on windows
    - change keys as needed to make sure it works across browsers
        - detect platform and change keys accordingly (cmd instead of ctrl for mac)
    - time estimate, 25 mins, complte time 8:00
    - updates at 8:25
        - got distracted
        - didn't seem like there was a well-accepted answer in plain JS for this
        - few stack-overflow threads on it, but all simple methods
          were documented as deprecated by Mozilla
        - decided to go with https://github.com/bestiejs/platform.js
    - new finish time 8:35
        - update at 8:40, Firefox keeps crashing, tried looking into it
        - just going to use chrome for now
        - new finish time, 8:50
- got distracted again
    - last I was looking up compatibility between browsers for key events
    - compatibilty stuff is a bit boring, will work on it soon but focus
      on features for today
- finding similar answers and grouping them in teacher summary page
    - time estimate 10 minutes, finish time 4:15
    - took longer than expected, few different issues
    - finish time 5:15
- update at 7:45
    - haven't gotten very much done today
    - still plenty of time left to work
    - stretch goals, by 2:00 am
        - complete the teacher grading experience 
            - similar assignments, too little work shown
            - sort to show problems students had the most trouble with first
            - better comparison - basic
                - opposite sides of equality flipped
                - extra spaces, formattting differences for multiplication/division
                - again look at WebWork and Khan code for more ideas
            - generate feedback docs for students
        - expression manipulation shortcuts, add to both sides, cross-out
        - handle cross-platform issues, test on chrome, firefox, IE, safari
- fix handling of change of total points on a problem to properly update states
  of all impacted problems
    - time estimate 15 mins, finish time 8:45

-------------------
1/17/2016
-------------------
- fix updating score upon change of possible points
    - for simplicity just add the change in possible points to each value
    - avoids rounding errors multiplying
    - May want to find implementation of decimal type in JS to
      preserve scores like 1.33 + 2 => 3.33
        - for now skip it
    - time estimate 10 minutes (already have an event that is updating total points)
    - expected finish 11
    - update 11:05, added some notes below, new finish time 11:15
    - actual finish time 11:30
        - when grabbing a single element out of a jQuery selector list it
          will be a raw DOM element, needs $() again to use jQuery methods
- ordering problems based on number of students who got it wrong
    - should any extra weight be given to problems where all of the students got
      totally different answers?
    - or instead where a bunch of them were wrong but got the same answer?
    - for now just count number wrong, based on answer key, will want to ask teachers
    - in the case where there is no answer key, might want to put the ones with common
      answers first, to make grading the bulk of work faster
        - but I think both orderings will be useful, if it's not too confusing should
          probably just give users to choice of how to order work
- counting number wrong to order in teacher summary - basic version 
    - 15 mins, finish time 11:45
    - got distracted, new finish time 11:55
    - actual finish time 1:00pm
        - there is a lot of unnecessary complexity in creating the data-structure for
          the aggregated student work
        - I think this should be able to be encapsulated to create and object with a 
          method to fetch or initialize a new list/object at some key
        - for now I at least made the variable names reasonable and got it working

----------------
1/18/2016
----------------
- research, look at how the latex() method traverses the mathquill tree
    -  20 mins, finish time 10pm
    - debuged through one pass
    - looks like a visitor-like pattern, will look into this more

----------------
1/23/2016
----------------
- review tasks left for MVP
    - finish time 10:45, 10 minutes, actual finish 10:50
- code cleanup
    - make the loop that generates the teacher overview page reasonable
    - time estimate 15 mins, expected finish 11:15, actual finish, 11:12
- continue cleaning up teacher summary generation
    - factor out the reorganization of individual students assignments into
      aggregated work for each problem, separated by different final answers
    - time estimate 15 mins, complete 12:00, actual finish 11:52
- more cleanup
    - factor out adding the global controls on the teacher summary page
    - time estimate 5 minutes, finish 12:00, finished on time
    - took a break, actual finish time 1:45

----------------
1/27/2016
----------------
- add show/hide button on the div for all student work leading to one answer
    - should probably leave the div there with the common answer and a show button
    - make it easier to bring it back without going to global show/hide
    - can this be enough for show hide at this level?
        - currently the only action in one of these groups is to apply an grade to all
          students
            - so it might not be too important to have show/hide buttons for each
              incorrect/correct/partial
        - probably reasonable default, but should add a "don't apply grade to other matching answers"
          check box for teacher to override this behavior
    - time estimate 30 mins, including the don't apply grade to others button
        - expected finish time 9:40, actual finish 10:00
- allow for targeted teacher feedback
    - want to allow for teachers to click on a portion of a students work to
      pinpoint where they need to review their work
    - found this library that simulates the behavior of the firebug/dev tools inspect element selection
    - https://github.com/andrewchilds/jQuery.DomOutline 
    - task spec
        - add button to each student work div on teacher summary to activate targeted feedback
        - activate DOM selection
            - set the click event to add a class for positive/negative bckground color
            - TODO later
            - allow teacher to enter text specific to this highlighted section
                - can add a list of notes below, each can be numbered
    - total time 45 mins, expected finish 10:20, actual finish 11:00

----------------
1/28/2016
----------------
- persist teacher targeted highlights
    - don't know how to do this with sub-expression selections
        - would require adding a highlight feature to mathquill, with support in the parser
          CSS generation etc.
    - easier solution
        - the highlight library has the ability to limit what can be clicked by a selector
        - I can just only allow highlighting of complete steps
            - I can store this information alongside an equation, rather than inside of it
        - similar teacher experience
        - also remove the need to deal with finicky selections of subsets of equations
            - the simple implementation required clicking on each individual digit in a number
            - could probably improve this with the selector config, but would require more knowledge
              of mathquill
    - time estimate to change to only selecting whole expressions 10 mins
    - expected finish 6:30, actual finish time 7:00
        - figured out how the events were being triggered I had to manually search up the DOM
          to see if the element associated with the event matched my desired class
        - might want to find out if there is a more efficient way to do this, because this might
          be pretty expensive listening for events on all DOM elements
- show student name (filename)
    - make this optional with a global toggle
    - time estimate 15 mins, 7:15
    - update at 7:50, got distracted
        - finished showing student filename
        - need to implement show/hide
        - estimate 5 mins, finish time 7:55, finish time 8:00
- alyssa interface testing
    - gave her the demo set of student work
    - no complaints about the interface
    - would like more info above each problem for the directions
      that the students had when doing each problem
        - this would depend if the content is managed in the software
          or not
        - I assume the teacher should have the book/file available to them

----------------
1/30/2016
----------------
-

- research to see if khan expression comparison for grading is open source
    - or look at the Webwork code for this
        - in Perl but may be able to translate into JS easily
    - time cap 25 mins, expected finish 10:30
        - KAS looks like it will be suitable for now
        - the README doesn't seem to show a lot of options for disabling
          some features
- implement better answer comparison with KAS
    - 15 mins, finish at 10:45
    - update at 12:10, added their basic semantic equality check
    - TODO - looks like perseus does have a few options for customizing
      comparisons, should look at making these configurable
        - https://github.com/Khan/perseus/blob/master/src/widgets/expression.jsx#L1050
            - look for answer-option if the source changes (not much change recently)
            - too lazy to lookup github permalink stuff
    - currently still groups things by exact equality, see comment in source
      about using a JSON object as a hashmap
        - assuming their expression equality checks are always transitive, I can
          just create equivalence classes with a list of lists and just traverse
          the list, adding a new class to the end if it is not equal to any current
          group
        - this will be a balancing act, sometimes teachers will want to see the differences
          to give partial credit for non-standard form equations
            - think this is best solved by the config options mentioned above
            - generally think anything that is considered equal by the KAS (given current
              config to respect or ignore standard form, factored vs expanded, etc.) should
              be grouped for making grading faster
- require students to fill in problem numbers
    - can prevent creating a new problem if the last one doesn't have a number yet
    - time estimate 15 mins, finish time 2:30
- starting back up at 6:45
    - finish prevent students from leaving numbers blank, 7:00 finish time
    - finished on time
- decide what to do when a student is missing a problem
    - could just be a loop to add answer of "" with no steps for all students
      who are missing a given problem
        - these would be grouped together automatically
        - *done* in this case should give teachers an easy option to hide one set of answers completely
        - have special display to say "no work or answer given" rather than rendering an empty expression
    - time estimate 10 mins, finish time 7:10, actual finish time 8:00
        - took a litle longer to work out how to modify the student work aggregation loop
            - should probably work on simplifying and cleaning it up

---------------
2/2/2016
---------------
- reviewing odd answers provided in the back of "Algebra Structure and Method"
  to find different types of answers that should be able to be graded automatically
   - no solution, have a good standard way to represent this
   - sets, unordered comparison of some elements in math "expressions"
        - several answers are going to be assumed to be order insensitive
        - should be able to change this, for questions like, list the teams in decreasing
          order of average points per game
    - some kind of special behavior for multiple choice
        - this this would mostly apply to content created created by teachers in the system
        - for creating generic answer key they can just enter the letter and the text 
          of the answer as correct
        - make sure all text comparison is case insensitive
            - although case does matter for expressions
    - figure out how to handle answers with units
        - and compound units: m/s^2
    - label nubmer/expression pairs
        - apples: $5, pears: $10
    - parsing money/times
    - underline/highlight part of an expression

---------------
2/3/2016
---------------
- read up a little on JS frameworks
    - Angular vs React
    - https://www.airpair.com/angularjs/posts/angular-vs-react-the-tie-breaker
    - seems like React is easier to learn
    - Angular has been around longer, more ready-made components available
- talking to Alyssa
    - Good for physics classes
    - how does this work with Moodle?
        - issues with logging out?
        - minimal interaction with Moodle (or other CMS)
        - students just uploading files (same as Word or powerpoint doc)
        - teachers downloading docs (like if they were manually grading essays)
        - there is just an automated tool for them to process the work
    - integration with MyMathLab, Khan Academy and other managed homeworks systems
        - this should be foremost a better notebook
        - need to nail student editing experience or it will be useless
        - in this case, even if students all have different generated problems,
          removing the usefulness of the regular teacher grading screen
            - students can still use this as an alternative to a paper notebook
            - current web sites lack enough of an interface for students to
              complete real problems
            - most just have places for final answers, some have more complex answer
              types, like the (graph, table, etc.) components in Persesus and Learnosity
            - even using one if these systems, students could complete step-by-step work
              in their digital notebook, flagging problems for teacher review when they
              are stuck
                - right now these systems often give no credit for partially
                  completed work, in some cases penalizing multiple attempts
                - totally backwards way to grade, disincentives exploration
- need to separate back-end from presentation and UI events
    - Was thinking of maybe using DOM as a data-structure, to avoid consistency issues
    - this is not how modern JS is written
    - take some time to design the data structures in the various experiences
        - define all of the modifications that can be made
        - need to define concrete Models for each of the experiences
    - work for 40 mins on this, finish time 9:20
    - update at 10:15, got distracted
        - new finish time 10:40
- Student digital notebook experience
    Global App State
    {
        "globalOptions" : {
            "gradeLevel" : "algebra", 
            "customKeyshortcuts" : {},
            "enableComposeKeys" : true,
            "enableAutoCompleteSymbols" : true,
            "showOnScreenKeyboard" : true
        }
    }
- Model for Student assignment
    - questions
        - should configuration options be allowed to be customized for a 
          given assignment?
            - teacher could send out an assignment template doc, that would 
              include some recommended settings
            - generally don't think disabling the calculator/graphs is that
              useful, students are smart and can find them elsewhere, but it
              might make teachers feel better
        - handling expressions vs numbers
            - should store information with no loss
            - accurate representation of irrational numbers is important
            - should all numbers be stored as latex and assumed they need
              to be parsed/displayed?
        - handling undo/redo
            - think that problem or component local undo/redo will be needed
            - going back to a problem, students will need to be able to edit
              their work on a single unit, without undoing a bunch of history
              in other problems
            - would there even be a global undo/redo?
                - definitely needed for bulk problem deletion
                - or even individual problem deletion
                - need to decide how this interacts with the component local
                  undo/redo behaviors
                - might be simpler to just keep track of all deleted problems
                  in a trash bin, and allow any to be restored until the app
                  is closed
                - what other assignment level edits may need to be undone?
    - actions
        - set the filename
        - add a new problem
            - require previous problem have a filled in number
        - add an answer or work component to a problem
           - should an expression box be automatically added?
           - yes, but it should be able to be deleted if the problem is just
             requiring text or a graph with no equation
        - edit a component
            - add an undo-redo event
            - examples
                - add new expression step
                - add new graph function
                - add new graph point
                - add table row/col
                - edit properties of any sub-components
                    - change equation in a step
                    - change how function is currently graphed
        - mark final answer
            - will only be possible with some components, others
              will at least initially require manual grading
            - some compoents may allow setting multiple answers
                - such as two different steps in an expression series
        - save assignment
        - load assignment
    Assignment
    {
        "filename" : "jasonA",
        "problems" : [
            {
                "number" : "1.a"
                "studentWork" : [
                    {
                        "componentType" : "expressionSeries"
                        "data" : { "steps" : [
                            { "expression" : "2x=4" } ,
                            { "expression" : "x=2", "finalAnswer" : true
                        ]
                    },
                    {
                        "componentType" : "numberLine"
                        // see point above about numbers vs expressions, this could just
                        // be a list of JSON numeric values
                        "data" : { "points" : [ "2" ] }
                    },
                    {
                        "componentType" : "geogebra"
                        // some embedded components will require saving their contents to binary
                        // need to figure out how to best store these
                        // also need to think about API points they expose, will their events
                        // need to trigger system changes? Undo/Redo events, auto-save, etc.
                        "data" : { "base 64 encoded binary?" }
                    }
              ]
        ]
    }
- Model for Teacher grading (student work summary) page
    - few different cases
        - answer key available
            - teachers might want their manual grades to amend the answer key
            - not sure if this needs to be kept separate from the original key
        - no answer key available
            - teachers can construct an answer key as they manually grade
              student work, give partial credit to some answers
    - special situations, might be different pages/models
        - check for students submitting the same or very similar
          work across all problems
        - students might mistype problem numbers, skip some problems
          intentionally or accidentally, what should teacher see?
        - identify students with significantly less work than others
            - even if they got the right answer
    - actions
        - load student work zip
            - load answer key, should be able to happen before or after
              lading the work, that or they should be forced to be done together
        - set ordering
            - numeric order as appeared in assignment
            - most misunderstood (most incorrect answers) first
        - set global options
            - allow half or other non-integer point values
            - allow extra credit
            - show/hide student names (for anonymous grading)
            - answer comparison options
                - standard form
                - capitalization of variables matters
                - numeric approximations allowed, sig figs
                    - some of these might be different per-problem
                    - should there be optional config at the top of each problem
        - set total points for one problem
        - scale all problems to give a desired number of total points
          for the assignment
        - set points for a given student answer
            - apply to all similar answers, unless overridden by check-box
            - update view/color of problems to reflect new status, correct, incorrect, partial
        - highlight student errors/successes
            - click button to activate
            - click on part of student's work to highlight
                - each component needs to define what sub-components can be selected
            - escape or click outside of student work boxes to stop highlighting
        - save graded work
            - for distribution back to students
            - for continuing grading session later
            - any reason for these being different formats?
                - should the in-progress new answer key created by the teachers manual grading
                  be bundles with the assignments in the zip or saved separately
                - think teachers would be okay with a separate file
        - finding identical or very similar assignments
        - identify problems with correct answers, but very little or no
          work shown
            - might still auto-hide, but in the section where they would appear I can have
              a link that says "3 students with correct answers but very little work shown <show work>"
    Aggregated Student Work
    [ {
        "problemNumber" : "1.a",
        "totalIncorrect" : 5, 
        "totalMissing" : 0,
        "uniqueAnswers" : [
            // the answers cannot actually be used as keys in a normal JSON map/object
            //      - which is how this is implemented in the app right now
            // comparison is going to be complex, multi-part answers, similar expressions
            // determined to be close enough by a CAS to receive the same answer (with teacher
            // manual review to catch undesired equivelences)
            { 
                // I was trying to represent different answers across students, but this list
                // is probably going to need to be a more complex structure to allow for showing
                // the different combinations of multi-parts student answers taht were determined
                // to be similar enough to automatically be assigned the same grade
                "finalAnswers" : [ "x=7", "7=x" ],
                "studentsWork" : [ 
                    {studentFile : "jason", autoGradeStatus: "correct|incorrect", steps : ["2x=14","x=7" ]}
                ] 
            }
        ]
    }]

------------------
2/4/2016
------------------
- learning more about react
    - https://www.youtube.com/watch?v=XxVg_s8xAms
- goal, try to write a student problem solving component in react
    - assume a single equation with multiple steps
    - pretty much just implement the current interface
    - at first do it without integrating with Mathquill, just make text boxes
      with undo/redo and copy curent expression to next step
    - total time 25 mins, finish 8:30

------------------
2/6/2016
------------------
- learning react
    - continuing with this tutorial
    - https://facebook.github.io/react/docs/tutorial.html
- rewrite single problem interface as a react component
    - include mathquill, but check back if taking too long
    - time estimate 30 mins, finish time 8:20

------------------
2/7/2016
------------------
- work starting at 6:05pm
- rewrite single problem interface as a react component
    - include mathquill, but check back if taking too long
    - time estimate 30 mins, finish time 6:35
    - took a little longer than planned
        - currently modifying the todo list example from React docs to add 
          undo/redo support, as well as copy down the last line when adding
          a new item
    - next sub-task, don't give special status to the last item (currently
      the new item to add), make each item a text box and allow any of them
      to be edited
        - make the init state have one populated item with a blank boc
    - time estimate, 10 minutes, finish time 6:55
    - had some issues trying to get the indeividual text boxes to change
      the parent's state
        - need to read up more about how this works
        - this example should give good info
        - http://todomvc.com/examples/react/#/
        
------------------
2/8/2016
------------------
- work starting at 9:00pm
    - finish converting problem interface to react, using the new todo list
      example for reference
    - got distracted only had a chance to read a little bit of the example's
      source code

------------------
2/9/2016
------------------
- Work starting at 9pm
    - finish converting problem interface to react, using the new todo list
      example for reference
    - first just copy down the example and nodify it so that the child todo
      elements are always editable
    - time estimate 15 mins, complete 9:15

------------------
2/11/2016
------------------
- pausing react conversion
    - still have more to learn
    - would like to work on features
    - still want to prioritize restructuring to allow for unit testing
- review outstanding tasks
    - time estimate 10 mins, finish 9:15
- cheating prevention, comparing student's work with diff tool
    - simple loop based aproach
        - make sure to stress test this for a fairly large class/assignment combo
        - JS should be fast enough
        - this is quadratic, where each operation is a non-trivial string diff
        - add button to UI for each grouping of matching students
            - allow for filtering the view to only matching students
            - should probably add a class or something based on the file/student name
              to make it easy to limit the view to just the list of matching students
              without re-generating the page
    - time estimate 20 mins, finish time 9:45
    - update at 9:55
        - took a little time getting the diff library, wan't a built version in the repo
          that I saw, pulled it down from the online demo
        - there is a JSON diffing method
        - currently just logging the number of changes between assignment pairs
            - need an efficient data structure to keep track of these things
            - 2d array for the groups that match
            - map for all of the assignements that are currently in any list
                - assignment/student name is key, value is the numeric index in the
                  first dimension of the 2d array of matching assignments
            - should student docs be allowed to exist in two lists?
                - in this case the map should be names -> list_indexes -> true
                - maybe? some docs will not be close enough to each other, but could
                  both be close enough to a third doc that they trigger the threshold
                - teachers can look at the clusters for groups of friends?
                - this still seems like a dangerous but necessary feature, have to try
                  it out on some real classes
        - new estimate 10:15
            - build groups of matching docs
            - add classes to show a single group

------------------
2/14/2016
------------------
- finish up cheating prevention
    - for now I'm going to assume that groups that match should just
      all be shown together
        - no assignment will appear in more than one group of similar assignment
        - even though this will mean that a comparison between any two assignments
          in the group may not pass the threshold for similarity
        - as students who do a few random modifications of a copied assignment
          will be doing different changes, but they might have cheated from a common
          student
    - time estimiate 30 mins, finish 8:25
        - still a 2d array, but the original structure for tracking who is in
          a list will work, because individual assignments can no longer be in
          multiple groups
        - in this case the lookup map should be: names -> list_indexes

------------------
2/16/2016
------------------
- filter docs to those given by a particular group of similar student assignments
    - for teachers to idenfiy student's copying each othes work
    - estimate (if the CSS classes work as expected) 15 mins, finis time 10:20
        - ended up needing to escapde . and / in the class names
        - little extra debugging as well
        - actual finish time 11
- Answer key appears to be broken
    - investigating, check back at 11:15
    - fixed, finish time 11:20

------------------
2/17/2016
------------------
- Added some styles to to the filters for correct, incorrect and partially correct work
- need to organize and test the code
    - still not sure if React is the right way to go here, but a separated front-end and model is
      definitely the best option

- TODO soon
    - better answer check
        - at least use Khan check for fully simplified answer
    - should generate list of common related equality
        - reordering multiplication of poynomials (x-1)(x+1) <=> (x+1)(x-1)
            - inside of parens should be standard form? this is reasonable -> (1+x)
        - decimal points vs fractions
        - extra parens (x)^5, (4/5)x, (x)(x) vs x*x
        - look at answer keys for more examples

- pitfalls left
    - too much reliance on students entering problem numbers correctly
        - check to make sure their problem numbers are unique within an assignment
    - on the teacher side, correcting ambiguities/different formats for problem numbers
        - start off with a page with all of the work that problem numbers that didn't match
        - would be useful to create the thing that takes an assignment description and
          fills in all problem numbers for students
            - 1-5, 6-18x2, 21-33 odds, 36-44 by 2
    - students submitting identical or nearly identical work
        - need to be careful how teacher react to this feature
            - student's might honestly submit very similar work even when they
              aren't cheating
            - given they all have the same interface, especially for simpler assignments
        - actually doing the diffs
            - https://github.com/kpdecker/jsdiff
        - for now could give a box with assignment wide-warnings
            - just open the grading page with the two (or more) similar assignments
              as the only ones shown
            - area to give assignment level message, or overall assignment score
                - decide if this work should be shown or hidden back when grading the
                  rest of the student work
            - give a link back to the complete class overview
    - handle case where possible point adjustment leads to negative score
        - good argument for proportional point adjustment upon change
            - with a setting for rounding or using decimal values
        - make sure to update status if whatever strategy used causes a change to another
            - rounding up makes it correct
            - currently making it worth less points can make it 0 easily, probably not desired
                - don't want to take away some credit from students
                - might want to warn teachers if there are problems that would make it down
                  to 0 given a change to allowing decimal scores
    - turn off highlighting steps when clicking outside of student work area
- actually save student feedback
    - first iteration, save to array of JSON docs
    - next will work on generating the actual files in a ZIP
        - what about a partially-complete grading session
            - is there a difference between a student-submitted doc and a graded one
            - can students re-submit assignments after grading to correct their mistakes
    - time estimate 15 mins 


- implement undo-redo with DOM element hide/show
    - is it feasible to store all data in the DOM?
    - seems like a good way to avoid inconsistency
    - related - need to allow teachers to easily re-arrange student work if their numbers are off
        - might be able to defer, but would probably be needed in real use, that or they
          could just tell their students to be careful about the problem numbers

- features needed for basic prototype
    - teacher grading
        - alternate sort orderings for problems
            - need to write a comparison function for nested problem numbers
              so I can sort them back into the correct order
                - string comparison would almost work, but I would need to make users
                  zero fill their numbers
                - not hard to parse and compare
            - as well as not rely on the order in the key or student assingments
              to determine how they are shown
                - some users may want the answer key to define ordering, but I've never
                  seen anyone using something that wouldn't sort well
                - hardest part with probably be resolving letters vs roman numerals
                    - looking across problems should enable dealing with this automatically
        - better comparison check for answers that accepts similar expressions
          given some configurable constraints
            - algebraically equivalent
            - require standard form?
            - look at Khan Perseus, Khan-exercises projects
            - look at WebWork methods for grading
    - generate grade-book "table", csv or excel file that can be opened by
      teachers to put grades manually into their own gradebook
        - might figure out if I can integrate directly with Moodle
          to update the grade-book automatically
    - student experience
        - fix keyboard shortcuts
            - later but soon
        - apply operation (add, subtract, divide, etc.) to both sides
        - substitute value in for variable
        - cross out selection for cancellation of terms 
            - auto remove crossed out sections on "next-step"
        - drag/drop for term rearrangement?
    - unit and integration tests
        
     
    - possible next steps
        - enable users to split the solution path
            - to solve for multiple answers
        - give students other elements they can construct/manipulate other than expressions
            - can use the components from Khan-Perseus, they are really solid
            - text
            - graphs
                - tools in Khan grapher are  alittle limited
                - should look ato add arbitrary beizer curves as an option
                - http://www.victoriakirst.com/beziertool/
                - http://math.hws.edu/eck/cs424/notes2013/canvas/bezier.html
            - calculator
            - geometry/physics diagrams
            - chemical equations
        - teachers are generating a lot of useful information when they give partial credit
            - for use on several classes, it might be good to allow saving any newly accepted
              correct, or partially correct answers into the key
            - might be good to be able to read multiple zip files, to allow grading multiple
              classes worth of assignments while still keeping the documents separated for uploading
              back to the different moodle class pages
                - should research how moodle works in regard to sharing materials/assignments/etc.
                  between different sections of the same class
                - do teacher currently work around shortcoming by managing multiple classes as one? 
        - set up real environment for managing dependencies indecent of the app
        - enable teacher feedback by clicking on a point in the students work
            - prevents the need to describe where the error was in text
            - search for draw line between DOM elements got me here:
            - https://jsplumbtoolkit.com/ 
            - would be simpler to just correlate them with numbers
                - would also avoid drawing a line over the student's work
                - just have a list of ordered feedbacks, overlay on the equation where
                  teacher clicked
                    - could allow click and drag with semi-transparent colored highlight
                    - allow different colors, red for mistakes, other colors can 
                      be used for suggestions or positive feedback
        - fix layout of student problems to pack more efficiently on teacher summary
            - https://github.com/desandro/masonry
        - consider allowing insertion of a step in the middle of a series of work
          this be more useful or confusing? Students can always undo/redo their work
        - might be easier to introduce the concept of copying several setps, either temporarily
          or into another workspace to solve a similar process in another problem
            - 'insert' could then become a copy later steps to temporary space, 
              add new step, copy back
            - even with this feature it might be worth still implementing the shortcut
              to insert into the middle of a line of work
            - if it's based on the current selected box, it would probably be pretty intuitive
            - although undo-redo gets more complicated
    - Features to add to mathquill
        - cross-out
        - auto-complete based on natural language search of symbol names
        - expression manipulation functions
            - question, is the expression tree represented in a structure that corresponds to
              evaluation prescedence? or just one that reflects how it is displayed?
        - faster creation of common symbols
            - look at ubuntu Compose Key shortcuts for math symbols I used a few years ago
            - recreating this in the browser could make power users much happier
            - even without full support a few symbols might be very useful
                '-' + '>' to create an arrow
    - allow teacher to drag and drop between lists
        - http://farhadi.ir/projects/html5sortable/ 
        - this may not even be that useful, should be much later I think 

---------------------------------------
MathQuill features to highlight in docs
---------------------------------------
- wrapping an expression
    - highlight selection, type '/' or '(' or '{' with apply the
      parenthesis or division to the whole select
    - rather than the usual behavior typing when selected on something
      which is to replace it
        - can be really useful, but when getting rid of a term and replacing it
          with something else it can be confusing, because it acts differently than
          a word processor
        - would be helped by the cross out feature, which should work the same way, applying
          over the selection
- subscripts/superscripts
- sqrt, abs val
- inequalities
- subscripted variables, just type a followed by 2 to get a_2
    - impossible to write a polynomial term in the wrong order, cannot type a2
