Bugs:
- \text
    - trying to test out if crossing out part of expression with the \cancel command is supported
    - this created a \text, doesn't appear to be supported
        - deleting the text it added seemed to put it in a weird state, couldn't move th cusor
        - on example page it shows the latex updating live, this was shown: \text{undefined}
        - also seems to have issues moving from the left into the text after clicking elsewhere


Learning JS Notes:
    - closure - a function that uses the context it was created in to access data
      or other functions
        - in javascript function scope is used for closures, as block scope does
          not exist
    - The global 'Object' is a function (remembvering that functions themselves
      are objects, just as numbers, strings, etc.)
        - Object.prtotype is the the root prototype
        - can 'Object' itself be used as a prototype?


Work on 1/9/2015
----------------
- brushing up on general JS concepts
- trying to figure out what exactly P.js provides
- debugging directly though the initialization of a mathquill element to
  try to understand what is goin on
- new task
    - acting purely as a consumer of MathQuill, with it as a black box,
      create an interface for editing an equation in a series of steps
    - use the built in MathQuill MathField construct to allow users to
      edit an expression and then hit a button to declare that they are
      moving on to the next 'step'
        - A MathField can easily be created by mathquill-ifying a span 
          with latex in it
    - Should be as simple as starting with a span, adding a button to export
      the latex in the current field and create a new one below it with this
      as the contents
    - put these fields in a div so that the last one can always be found to
      know where to copy from to create the next step
    - bonus
        - create an undo button (not for MathQuill itself, but to delete a step)
            - save the steps in the background to allow re-do
        - put the cursor back where it was
- got a little distracted looking at java projects again
    - it's hard to give up on a prototype, but the java community just isn't as
      active
        - and the editing experience with mathquill is just great
        - and it has lots of tests
        - might decide to go back to the java project someday, but for now I need
          to move on

Work on 1/10/2015
-----------------
- same task as before, make step by step editor by simply copying mathquill fields
- starter task
    - just programmaticlly generate a few MathFields, giving the latex as string
      literals in the JS, adding spans and mathquill-ifying them
        - time estimate 30 mins, complete time 10:30
        - actually completed, 10:15
    - create a button that will search the div for the last element, export latex from
      it and use it to generate a new mathfield
        - time estimate - 30 minutes, complete time 10:45
        - actually completed, 10:25
    - create a keyboard shortcut that will remove the need to click the button
        - maybe crtl-e for 'edit'?
        - should this be attached to all of the boxes to allow inserting a step below the current?
        - or should it just be a global key event that will always copy the last step?
        - time estimate 30 minutes, complete time 11
        - actually completed, 10:45
            - just did a global event for now
    - create a button and shortcut for undo
        - time estimate 30 minutes, complete time 11
        - finished, 11:15
            - small speeling error I was staring at in the debugger for a while "why is this undefied?!?!"
    - create redo button and keyboard shortcut
        - completed 11:45
    - create test video to show interface in action
        - fixed fraction navigation, enabled atuo commands for: sqrt, sum, etc.
        - time estimate 10 minutes, finish time - 12:05
        - actual complete time - 12:10
    - first version of the app is reasonably functional
    - lunch break
        - ~1 hour
    - noticed issue with copy-paste
        - was a problem with re-mathquillifying elements
            - this doesn't work
            - if I want to use mathquill methods, I need to keep track of
              the mathquill virtual dom versions along with the ones in the DOM
        - had to mess around with this for a while
            - finally just decided to keep a parallel array of all of the mq
              versions of each step as a parrallel array to the list in the DOM
        - finished 2pm
    - sporatically still seeing issues copying out of static math
        - seems to just be on firefox, chrome is fine
        - to reproduce, copy one section of static math expression and paste elsewhere
        - try copying a new selection and it will still pate the original selection
          copied first
    - also needed to manually mathquillify mathquill-static-math spans
        - old docs say this isn't necessary
            - the new ones have an example fragment that makes it seem like this should
              still work
    - resuming work 2:15
        - working on publishing a static version of the app for others to test
        - on gh-pages branch just published the source including the usually
          ignored 'build' directory to include the compiled MathQuill source
    - next task, button to generate new expression work spaces
        - remove globals, etc. described below
        - time estimate 30 minutes, expected complete time 3:45
        - took a bit longer than expected
            - had a few distractions
            - actual finsish time 6:10
        - strategy
            - all problem workspaces will be generated with jquery
                - the append method returns the dom element, I want to store this along
                  with the state needed for each dom element
                - whether everything is nested together or stored in pareallel lists
                  doesn't seem to matter much
            - at the global level, there will be a single array for all of the state
              managed for a list of problems
            - on page load, create the first problem workspace as a DOM element using
              jquery
                - this will just be a div to hold the divs for the controls and expression list 
                - create the control buttons
                    - what to bind these to?
                - create the expression list div and populate it with the first expression
                    - insert as a span
                    - mathquill it, save the mathquill object to a list of all current mq objects
                      inside of the object representing this problem
    - fixing keyboard shortcuts with multiple problems
        - took a little long, eventaully got it to work attaching the key listener
          to the div for a given problem rather than the individual text boxes
        - finish time 7:30
    - save functionality
        - offline save, no server
        - http://eligrey.com/demos/FileSaver.js/
        - total expected time 30 mins, expected completion 9:00
        
    - load save file
        - done
        - needed to put in a timeout hack to fix multiple MathFields being selected
          when I generated then programmatically and called focus on each as they 
          were added (reusing code from the buttons/key events)
    - teacher grading
        - time estimate, 40 mins, expected completion 8:00
        - make 3 student assignments, zip them manually
        - create teacher grading page, similar to student assignment page
            - teachers can enter problem numbers next to expressions representing final answers
              for problems
            - they can omit problem numbers where manual grading is needed
                - will be more useful once students can do things other than manipulate equations
                    - type text
                    - draw diagrams
                    - draw/manipulate graphs
                    - create/fill in tables
        - https://stuk.github.io/jszip/

--------------
1/12/2015
--------------
- finish teacher grading
    - read contents of zip files
    - re-use assignment interface for answer key
        - steps are instead used to denote several answers
        - might be worth it to implement basic correction 'modes'
            - all answers must be present
            - one of many correct answers
            - n of many answers (example, 3 of 5 possible correct answers must be provided)
    - generate teacher summary page with just incorrect work
        - can make step static math rather than editable fields
        - provide a box for feedback and another for partial credit
        - ask for default points per problem
            - allow them to override total points for each problem while grading
            - as well as individual student scores
    - time estimate, basic answer check
        - single answer for now, need to decide on student experience for muliple answers
        - 15 mins, expected finish 6:45
    - caught up trying to get static math expressions rendered in a loop after
      reading and re-arranging the student work

-----------------
1/13/2015
-----------------
- teacher grading page
    - didn't get much done, spent a little time still trying to generate the most basic
      teacher overview page
    - eventually just changed the student work for a single problem (across all stuedents)
      to look like a single assignment with many different problems (the individual student
      assignment format) and used the existing method to open it as a single assignment
        - code currently aassumes there is only one assignment, so even if this is how
          it is done eventaully, a container to put the assignment into would need
          to be passed into the method to populate an assignment with data
        - in the student mode, there would just be a single assignment open
        - in teacher mode there would be a list of 'assignments' where each one
          represents the work across all students on a single problem

-------------------
1/14/2015
-------------------
- try to get static math rendering to work
    - try to remove forEach loops to see if it fixes the previous issue
        - time estimate 15 minutes, expected complte 7:00
    - or just include staticMath as a flag in the openAssignment() method
    - actual finish time 7:15
    - figured it out, stupid bug, was passing a list of jQuery elements into the
      MathQuill methods to create StaticMath or a MathField
- student work filtering based on answer
    - read in doc at the time student answers are selected
    - prompt, do you want to use the current doc as an answer key?
        - your doc will be replaced by the student summary, reccomended that you save
          the current doc before continuing (to make the answer key reusable)
        - awkward user behavior, will fix soon
    - time estimate 15 minutes, expected finish time 8:00
    - update 8:10
        - cleaned up branch to get rid of old commits from debugging
        - updated styles to add boarders around divs and change colors
        - new finish time, 8:15
        - actual finish time 8:40
- generate divs with correct work, hide them by default
    - color code them with classes based upon corect incorrect
    - time estimate 20 mins, expected finish time 9:00
    - finsh time, 9:20
        - took a little bit to figure out the good way to do it with jquery
        - and some time wasted chasing a class selector tha should have been an id selector
- enable teacher feedback box, show scores on summary page
    - allow teachers to override scores to give partial credit
    - when partial credit is given, turn yellow
    - if full credit is given, change status to correct, and change color
        - don't hide immediately, use an animation to remove it
        - this would be easier to undo with a problem local toggle to see correct work
            - TODO 
    - estimate 30 mins, expected finish 10 pm
    - preempted
        - bug, parenthesis are not showing on correct answers
        - fixed by triggering a delayed click event on the checkbox to toggle showing correct answers
          rather than hiding by default or immediately after creation

-------------------
1/15/2015
-------------------
- define scope for work this weekend
    - 15 minutes, expected completion 7:15
- add point value to problems on teacher grade page
    - default to 1 point per problem
        - maybe add a popup to ask later?
    - give a text box at the top of each problem summary showing all work
      to change the point value
        - update all child elements for each students work to say
        - points _m_ out of n
        - m value is the partial credit given by teacher, or full credit
          given by the computer
    - this will help to find the problem summary container corresponding to the text box
        - jQuery closest() method searches up the DOM tree for a given selector
        - could also be used to refactor some of the code for problems/steps
          on the student side
    - estimate 20 minutes, expected complete 8:00
    - update at 8:15, added the text boxes, got a little distracted
        - still need to add the action of updating the possible points
          in each individual problem
        - should I prompt users if the partial credit scores should be scaled
          as well?
    - update 8:30
        - distracted reading a few articles, new finish time 8:40
        - actual finish time 9:00
- enable teachers to apply a given point value to all students who got the
  same wrong, or not automatically graded correct answer
    - time estimate, 15 mins, complete time 9:15
    - actual finish time, 9:40
- change problem status based on manual grade given
    - create new class for partially-correct, colored yellow
    - listen for change event on text field, make sure it also updates
      the other problems that the score propogates to
    - time estimate 15 mins, finish time 10:00
    - actual finsih time, 10:20
- add feedback textarea
    - estimate 5 minutes, finsih 10:25
    - won't worry about copying feedback to similar-answer problems for now
    - will wait for user feedback, simple enough to add
    - added, also implemented show/hide for partially correct answers
        - not sure about hiding answers as soon as they are given
          a score that puts them into a category that is currently hidden
        - at the least need an animation to hide them gradually
        - on mistyped scores, wil it be too anoying to go find it again?
            - definitely want problem local show/hide in this case
- add animation to show/hide problems
    - finished

-------------------
1/16/2015
-------------------
- update problem page to take advantage of MathQuill() function
    - avoid the need to keep track of all MathQuill objects parallel
      to the actual DOM element
    - time estimate 15 mins, complete time 7:30
    - completed on time
- fix keyboard shortcuts so they work on windows
    - change keys as needed to make sure it works across browsers
        - detect platform and change keys accordingly (cmd instead of ctrl for mac)
    - time estimate, 25 mins, complte time 8:00
    - updates at 8:25
        - got distracted
        - didn't seem like there was a well-accepted answer in plain JS for this
        - few stack-overflow threads on it, but all simple methods
          were documented as deprecated by Mozilla
        - decided to go with https://github.com/bestiejs/platform.js
    - new finish time 8:35
        - update at 8:40, Firefox keeps crashing, tried looking into it
        - just going to use chrome for now
        - new finish time, 8:50
- got distracted again
    - last I was looking up compatibility between browsers for key events
    - compatibilty stuff is a bit boring, will work on it soon but focus
      on features for today
- finding similar answers and grouping them in teacher summary page
    - time estimate 10 minutes, finish time 4:15
    - took longer than expected, few different issues
    - finish time 5:15
- update at 7:45
    - haven't gotten very much done today
    - still plenty of time left to work
    - stretch goals, by 2:00 am
        - complete the teacher grading experience 
            - similar assignments, too little work shown
            - sort to show problems students had the most trouble with first
            - better comparison - basic
                - opposite sides of equality flipped
                - extra spaces, formattting differences for multiplication/division
                - again look at WebWork and Khan code for more ideas
            - generate feedback docs for students
        - expression manipulation shortcuts, add to both sides, cross-out
        - handle cross-platform issues, test on chrome, firefox, IE, safari
- fix handling of change of total points on a problem to properly update states
  of all impacted problems
    - time estimate 15 mins, finish time 8:45

-------------------
1/17/2015
-------------------
- fix updating score upon change of possible points
    - for simplicity just add the change in possible points to each value
    - avoids rounding errors multiplying
    - May want to find implementation of decimal type in JS to
      preserve scores like 1.33 + 2 => 3.33
        - for now skip it
    - time estimate 10 minutes (already have an event that is updating total points)
    - expected finish 11
    - update 11:05, added some notes below, new finish time 11:15
    - actual finish time 11:30
        - when grabbing a single element out of a jQuery selector list it
          will be a raw DOM element, needs $() again to use jQuery methods
- ordering problems based on number of students who got it wrong
    - should any extra weight be given to problems where all of the students got
      totally different answers?
    - or instead where a bunch of them were wrong but got the same answer?
    - for now just count number wrong, based on answer key, will want to ask teachers
    - in the case where there is no answer key, might want to put the ones with common
      answers first, to make grading the bulk of work faster
        - but I think both orderings will be useful, if it's not too confusing should
          probably just give users to choice of how to order work
- counting number wrong to order in teacher summary - basic version 
    - 15 mins, finish time 11:45
    - got distracted, new finish time 11:55

- features needed for basic prototype
    - teacher grading
        - cheating prevention, find similar student assignments
        - identify problems with correct answers, but very little or no
          work shown
        - alternate sort orderings for problems
            - make the default show the "most misunderstood" problems first
            - need to write a comparison function for nested problem numbers
              so I can sort them back into the correct order
            - as well as not rely on the order in the key or student assingments
              to determine how they are shown
                - some users may want the key to define ordering, but I've never
                  seen anyone using something that wouldn't sort well
                - hardest part with probably be resolving letters vs roman numerals
                    - looking across problems should enable dealing with this automatically
        - better comparison check for answers that accepts similar expressions
          given some configurable constrains
            - algebraically equivalent
            - require standard form?
            - look at Khan Perseus, Khan-exercises projects
            - look at WebWork methods for grading
    - generate grade-book "table", csv or excel file that can be opened by
      teachers to put grades manually into their own gradebook
        - might figure out if I can integrate directly with Moodle
          to update the grade-book automatically
    - generate individual student feedback docs
    - student experience
        - fix keyboard shortcuts
            - later but soon
        - apply operation (add, subtract, divide, etc.) to both sides
        - substitute value in for variable
        - cross out selection for cancellation of terms 
            - auto remove crossed out sections on "next-step"
        - drag/drop for term rearrangement?
    - unit and integration tests
        
     
    - possible next steps
        - enable users to split the solution path
            - to solve for multiple answers
        - set up real environment for managing dependencies indecent of the app
        - enable teacher feedback by clicking on a point in the students work
            - prevents the need to describe where the error was in text
            - search for draw line between DOM elements got me here:
            - https://jsplumbtoolkit.com/ 
        - consider allowing insertion of a step in the middle of a series of work
         this be more useful or confusing? Students can always undo/redo their work
        - might be easier to introduce the concept of copying several setps, either temporarily
          or into another workspace to solve a similar process in another problem
            - 'insert' could then become a copy later steps to temporary space, 
              add new step, copy back
            - even with this feature it might be worth still implementing the shortcut
              to insert into the middle of a line of work
            - if it's based on the current selected box, it would probably be pretty intuitive
            - although undo-redo gets more complicated
    - Features to add to mathquill
        - cross-out
        - auto-complete based on natural language search of symbol names
        - expression manipulation functions
            - question, is the expression tree represented in a structure that corresponds to
              evaluation prescedence? or just one that reflects how it is displayed?
        - faster creation of common symbols
            - look at ubuntu Compose Key shortcuts for math symbols I used a few years ago
            - recreating this in the browser could make power users much happier
            - even without full support a few symbols might be very useful
                -> to create an arrow

---------------------------------------
MathQuill features to highlight in docs
---------------------------------------
- wrapping an expression
    - highlight selection, type '/' or '(' or '{' with apply the
      parenthesis or division to the whole select
    - rather than the usual behavior typing when selected on something
      which is to replace it
        - can be really useful, but when getting rid of a term and replacing it
          with something else it can be confusing, because it acts differently than
          a word processor
        - would be helped by the cross out feature, which should work the same way, applying
          over the selection
- subscripts/superscripts
- sqrt, abs val
- inequalities
- subscripted variables, just type a followed by 2 to get a_2
    - impossible to write a polynomial term in the wrong order, cannot type a2
